#!/usr/bin/env zsh

# shellcheck disable=SC1090

cd "$(dirname "$0")/.." || exit

export DOTFILES
DOTFILES=$(pwd -P)

export XDG_CONFIG_HOME
XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"

ZDOT_CONFIG_HOME="${ZDOT_CONFIG_HOME:-$XDG_CONFIG_HOME/zdot}"
ZDOT_SYMLINKS="$ZDOT_CONFIG_HOME/symlinks.txt"
ZDOT_CONFIG="$ZDOT_CONFIG_HOME/zdot.zsh"

set -e

echo ''

. "$DOTFILES/lib/utils.sh"

change_shell () {
  asks "Change shell? "
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    # Using which zsh to get an updated path
    # e.g. installed via brew
    chsh -s "$(which zsh)" "$(whoami)"
  fi
}

source "$ZDOT_CONFIG" 2> /dev/null || true

check_init () {
  if [[ ! -f "$ZDOT_CONFIG" ]] || [[ -z $ZDOT_DOTFILES ]]
  then
    fail "ZDOT doesn't appear to have been set up yet."
    echo ""
    false;
  else
    true;
  fi
}

init() {
  info "info"
  warn "warn"
  okay "okay"
  fail "fail"
  info "Initializing ZDOT..."
  mkdir -p "$XDG_CONFIG_HOME"
  rm "$ZDOT_CONFIG" 2> /dev/null || true

  askl "Enter the full path to your dotfiles repo: "
  printf "ZDOT_DOTFILES=\"%s\"" "$REPLY" > "$ZDOT_CONFIG"

}

setup () {

  if ! check_init; then init; fi

  info "Installing dotfiles from $DOTFILES"

  rm "ZDOT_SYMLINKS" 2> /dev/null || true

  warn "When a symlink already exists but differs from the dotfiles version, what do you want to do?"
  asks "[s]kip it, [o]verwrite it, [b]ack it up? "

  export LINK_FILE_BEHAVIOR=$REPLY

  find -H "$DOTFILES" -maxdepth 3 -not -name ".git" -and \
    -name '*.symlink' | while read -r linker ; do
      link_file "$linker" "$HOME/.$(basename "${linker%.*}")"
    done

  # find the setup files and run them iteratively
  find -H "$DOTFILES" -maxdepth 3 -not -name '.git' -and \
    -name setup.sh | while read -r setter ; do
      source "${setter}"
    done

}

setdown() {
  check_init

  while IFS= read -r link; do

    ### Trim leading whitespaces ###
    link="${link##*( )}"

    ### trim trailing whitespaces  ##
    link="${link%%*( )}"

    if [[ -L $link ]]
    then
      rm "$link"
    fi

  done < <(cat "$ZDOT_SYMLINKS")

  rm "$ZDOT_SYMLINKS" 2> /dev/null || true

}

install () {

  check_init

  # find the install files and run them iteratively
  find -H "$DOTFILES" -maxdepth 3 -not -name '.git' -and \
    -name install.sh | while read -r installer ; do
      source "${installer}"
    done

}

update () {

  check_init

  # find the update files and run them iteratively
  find -H "$DOTFILES" -maxdepth 3 -not -name '.git' -and \
    -name update.sh | while read -r updater ; do
      source "${updater}"
    done
}

usage () {
  echo "zdot -- dotfiles management"
  echo ""
  echo "Usage: zdot install|bootstrap [options]"
  echo ""
  echo "    s, setup     Set up the system, create link, etc"
  echo "    d, setdown   Remove symlinks that zdot knows about"
  echo "    i, install   Install software"
  echo "    u, update    Update software"
  echo "   -h, --help    Show this message"
  echo ""
  exit
}

case "$1" in
  "init")
    init
    exit
    ;;
  "s"|"up"|"setup")
    setup
    change_shell
    exit
    ;;
  "d"|"down"|"setdown")
    setdown
    exit
    ;;
  "i"|"install")
    install
    exit
    ;;
  "u"|"update")
    update
    exit
    ;;
  "-h"|"--help"|"h"|"help")
    usage
    ;;
  *)
    echo "Invalid option: $1"
    usage
  ;;
esac

